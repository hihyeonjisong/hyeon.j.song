package kr.or.ddit.study5;

import java.util.Arrays;
import java.util.Scanner;

public class ArrayExample {
	Scanner sc = new Scanner(System.in);

	public static void main(String[] args) {
		ArrayExample obj = new ArrayExample();
//		obj.method1();
//		obj.method2();
//		obj.method3();
//		obj.method4();
		obj.method5();
//		obj.method6();
//		obj.method7();
//		obj.method8();

	}

	private void method8() {
		/*
		 * 선택정렬 원본자료가 n개일때 n-1차로 운행한다. 왼쪽 자료부터 기준값으로 선정하여 나머지 모든 자료와 비교한다.
		 */
		int[] num = { 67, 55, 9, 86, 98 };
		for (int i = 0; i < num.length; i++) {
			for (int j = 0; j < num.length; j++) {
				// i =0 (67, 55, 9, 86, 98)
				// (55, 67, 9, 86, 98)
				// (9, 67, 55, 86, 98)
				// (9, 67, 55, 86, 98)
				// (9, 67, 55, 86, 98)

				// i =1 (9, 67, 55, 86, 98)
				// (9, 55, 67, 86, 98)
				// (9, 55, 67, 86, 98)
				// (9, 55, 67, 86, 98)
				// (9, 55, 67, 86, 98)
				if (num[i] < num[j]) { // 오름차순내림차순 바꾸려면 부등호 변경
					int temp = num[i];
					num[i] = num[j];
					num[j] = temp;
				}
			}
		}
		System.out.println(Arrays.toString(num));
	}

	private void method7() {
		int a = 7;
		int b = 3;
		System.out.printf("a 값은%d b 값은 %d\n", a, b);
		// a랑 b값 바꿔보기
		int temp = a;
		a = b;
		b = temp;
		System.out.printf("a 값은%d b 값은 %d ", a, b);

	}

	private void method6() {
		// 버블정렬(bubble sort)
		// 원본자료가 n개 일때 n-1차 운행한다.
		// 각 회차에서 인접한 두값을 비교하여 오름차순인 경우 작은값을
		// 앞에 위치시킴

		int[] num = { 67, 55, 9, 86, 98 };
		System.out.println(Arrays.toString(num));
		for (int i = 0; i < num.length - 1; i++) {

			for (int j = 0; j < num.length - 1; j++) {
				// i=0 67 55 9 86 98
				// 1번째 시행 : 55 67 9 86 98
				// 2번째 시행 : 55 9 67 86 98
				// 3번째 시행 : 55 9 67 86 98
				// 4번째 시행 : 55 9 67 86 98

				// i=1 55 9 67 86 98
				// 1번째 시행 : 9 55 67 86 98
				// 2번째 시행 : 9 55 67 86 98
				// 3번째 시행 : 9 55 67 86 98
				// 4번째 시행 : 9 55 67 86 98

				if (num[j] > num[j + 1]) { // 큰것이 앞으로 오게 하고싶으면 부등호 반대로
					int temp = num[j];
					num[j] = num[j + 1];
					num[j + 1] = temp;
				}
			}
		}
		System.out.println(Arrays.toString(num)); // 배열로 보여줌
		
	}

	private void method5() {
		/*
		 * 배열 복사 : 얕은 복사(shallow copy), 깊은 복사(deep copy)
		 * 얕은 복사(shallow copy) : 복사된 배열이나 원본 배열이 변경될 때 서로 간의 값이 같이 변경
		 */
		
		int[] source = {1,2,3,4,5};
		int[] target = source;	//source의 주소값을 저장. target이랑 source는 동일함
		
		for(int i=0; i<source.length; i++) {
			System.out.print(source[i]+"\t");
		}
		System.out.println();
		
		for(int i=0; i<target.length; i++) {
			System.out.print(target[i]+"\t");
		}
		System.out.println();
		
		target[2] = 30;
		
		for(int i=0; i<source.length; i++) {
			System.out.print(source[i]+"\t");
		}
		System.out.println();
		
		for(int i=0; i<target.length; i++) {
			System.out.print(target[i]+"\t");
		}
		System.out.println();
		
		/*
		 * 깊은 복사 : 배열 공간을 별도로 확보
		 * 1. 반복문 이용
		 * 2. System.arrycopy()
		 * 3. clone()
		 */
		
		int[] des1 = new int[source.length];	//객체 새로 생성. 주소값이 다름
		for(int i=0; i<des1.length; i++) {	//for문으로 값을 일일히 넣음
			des1[i] = source[i];
		}
		
		des1[2] = 30;
		for (int i = 0; i < source.length; i++) {
			System.out.print(source[i] + "\t");
		}
		System.out.println();
		for (int i = 0; i < des1.length; i++) {
			System.out.print(des1[i] + "\t");
		}
		System.out.println();
		
		
		
		
		
		
		int[] des2 = new int[source.length];
		System.arraycopy(source, 0, des2, 0, 3);	//원본배열, 어디서부터, 복사된거 넣을 배열, ,복사할 개수. 원하는 갯수만큼 바꿀 수 있음
		des2[2] = 31;
		System.out.println("System.arraycopy 사용");
		for (int i = 0; i < source.length; i++) {
			System.out.print(source[i]+"\t");
		}
		System.out.println();
		for (int i = 0; i < des2.length; i++) {
			System.out.print(des2[i]+"\t");
		}
		System.out.println();
		
		
		
		
		
		
		System.out.println("clone 사용");
		int[] des3 = source.clone();	//알아서 전체가 깊은 복사
		des3[2] = 32;
		for (int i = 0; i < source.length; i++) {
			System.out.print(source[i]+"\t");
		}
		System.out.println();
		for (int i = 0; i < des3.length; i++) {
			System.out.print(des3[i]+"\t");
		}
		System.out.println();
		
	}
	private void method4() {
		// 키보드로 거스름돈을 입력받아 화폐단위 별로 개수를 구하시오
		int coin[] = { 50000, 10000, 5000, 1000, 500, 100, 50, 10 };
		System.out.println("거스름돈의 액수를 입력");
		int money = sc.nextInt();
		for (int i = 0; i < coin.length; i++) {
			int c = coin[i];
			System.out.printf("%d원 : %d 개\n", coin[i], (money / coin[i]));
			money %= coin[i];
		}
	}

	private void method3() {
		int[] score = { 75, 80, 81, 84, 95, 65, 77, 71, 82, 74 };
		int min = score[0];
		int max = score[0];
		int sum = 0;
		double avg = 0;
		for (int i = 0; i < score.length; i++) {
			if (score[i] < min) {
				min = score[i];
			}
			if (score[i] > max) {
				max = score[i];
			}
			sum += score[i];
		}
		avg = (double) sum / score.length;
		System.out.println(min + ", " + max);
		System.out.println(sum + "," + avg);
	}

	private void method2() {
		// 변수 5개를 저장하고 역순으로 출력
		int[] num;
		num = new int[5];
		for (int i = 0; i < num.length; i++) {
			System.out.println("i번째 정수입력");
			num[i] = sc.nextInt();
		}
		for (int i = num.length - 1; i >= 0; i--) {
			System.out.print(num[i]);
		}
	}

	private void method1() {
		// int 변수 5개 선언해 볼것.
		// [] 배열 선
		// new <- 메모리 할당
		// int[] <-생성될 개수
		int[] a1 = new int[5]; // 배열을 이용하여 변수 5개를 만듦. 배열선은 변수타입 옆에 바로 선언하는게 좋음
		for (int i = 0; i < a1.length; i++) {
			System.out.println(a1[i]);
		}

	}

}
